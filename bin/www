#!/usr/bin/env node

/**
 * Module dependencies
 */

var fs = require('fs');
var path = require("path");
var app = require('../app');
var debug = require('debug');
var https = require('https');
var privateKey  = fs.readFileSync(path.resolve(__dirname, 'localhost.key'), 'utf8');
var cert = fs.readFileSync(path.resolve(__dirname, 'localhost.cer'), 'utf8');
var credentials = {key: privateKey, cert: cert};

/**
 * Get port in environment variable and store in Express
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);

/**
 * Create HTTP server
 */

var server = https.createServer(credentials, app);

/**
 * Listen on provided port
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize port
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // Named pipe
    return val;
  }

  if (port >= 0) {
    // Port number
    return port;
  }

  return false;
}

/**
 * Event listener to HTTP server "error" event
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle listen errors with readable messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener to HTTP server "listening" event
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
